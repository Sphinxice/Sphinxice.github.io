{"title":"Spring基础","uid":"3a37cd072b4ce26a3caecc3401259a9a","slug":"Spring","date":"2021-10-07T14:32:21.000Z","updated":"2022-01-07T14:56:00.641Z","comments":true,"path":"api/articles/Spring.json","keywords":"Java","cover":[],"content":"<p>Spring</p>\n<ol>\n<li><p>导入Spring开发的基本包坐标</p>\n</li>\n<li><p>编写Dao接口和实现类</p>\n</li>\n<li><p>创建Spring核心配置文件</p>\n</li>\n<li><p>在Spring配置文件中配置UserDaoImpl</p>\n</li>\n<li><p>使用Spring的API获得Bean实例</p>\n<p><img src=\"http://image.1carus.xyz/image-20220107140830777.png\" alt=\"image-20220107140830777\"></p>\n</li>\n</ol>\n<p><img src=\"http://image.1carus.xyz/image-20220107140901595.png\" alt=\"image-20220107140901595\"></p>\n<p>Spring的重点配置</p>\n<p><img src=\"http://image.1carus.xyz/image-20220107140916025.png\" alt=\"image-20220107140916025\"></p>\n<p>Spring原始注解</p>\n<p><img src=\"http://image.1carus.xyz/image-20220107140937293.png\" alt=\"image-20220107140937293\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107140951971.png\" alt=\"image-20220107140951971\"></p>\n<p>spring集成web环境步骤</p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141008783.png\" alt=\"image-20220107141008783\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141017788.png\" alt=\"image-20220107141017788\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107225000163.png\" alt=\"image-20220107225000163\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141027148.png\" alt=\"image-20220107141027148\"></p>\n<p>视图解析器</p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141036651.png\" alt=\"image-20220107141036651\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141111493.png\" alt=\"image-20220107141111493\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141125601.png\" alt=\"image-20220107141125601\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">在@RequestMapping下加@ResponseBody 告知框架不进行视图跳转（跳转静态资源），而是直接进行数据响应返回的是字符串</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">new BeanPropertyRowMapper         \n\n&#x2F;&#x2F; javabean 需要满足标准  必须有空参数构造  数据库字段必须和属性名一致(数据封装失败)</code></pre>\n\n<p><img src=\"http://image.1carus.xyz/image-20220107141136127.png\" alt=\"image-20220107141136127\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141147081.png\" alt=\"image-20220107141147081\"></p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">缓存，毫无疑问这是Redis当今最为人熟知的使用场景。再提升服务器性能方面非常有效；\n\n排行榜，在使用传统的关系型数据库（mysql oracle 等）来做这个事儿，非常的麻烦，而利用Redis的SortSet(有序集合)数据结构能够简单的搞定；\n\n计算器&#x2F;限速器，利用Redis中原子性的自增操作，我们可以统计类似用户点赞数、用户访问数等，这类操作如果用MySQL，频繁的读写会带来相当大的压力；限速器比较典型的使用场景是限制某个用户访问某个API的频率，常用的有抢购时，防止用户疯狂点击带来不必要的压力；\n\n好友关系，利用集合的一些命令，比如求交集、并集、差集等。可以方便搞定一些共同好友、共同爱好之类的功能；\n\n简单消息队列，除了Redis自身的发布&#x2F;订阅模式，我们也可以利用List来实现一个队列机制，比如：到货通知、邮件发送之类的需求，不需要高可靠，但是会带来非常大的DB压力，完全可以用List来完成异步解耦；\n\nSession共享，以PHP为例，默认Session是保存在服务器的文件中，如果是集群服务，同一个用户过来可能落在不同机器上，这就会导致用户频繁登陆；采用Redis保存Session后，无论用户落在那台机器上都能够获取到对应的Session信息。\n\n一些频繁被访问的数据，经常被访问的数据如果放在关系型数据库，每次查询的开销都会很大，而放在redis中，因为redis 是放在内存中的可以很高效的访问</code></pre>\n\n<p><strong>简述 Redis 的数据</strong></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141157792.png\" alt=\"image-20220107141157792\"></p>\n<p>如果有多个intercecptor配置，按照编写的顺序，如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;mvc:interceptors&gt;\n    &lt;mvc:interceptor&gt;\n        &lt;mvc:mapping path&#x3D;&quot;&#x2F;**&quot;&#x2F;&gt;\n        &lt;bean class&#x3D;&quot;com.icarust.interceptor.MyInterceptor1&quot;&#x2F;&gt;\n    &lt;&#x2F;mvc:interceptor&gt;\n        &lt;mvc:interceptor&gt;\n        &lt;mvc:mapping path&#x3D;&quot;&#x2F;**&quot;&#x2F;&gt;\n        &lt;bean class&#x3D;&quot;com.icarust.interceptor.MyInterceptor2&quot;&#x2F;&gt;\n    &lt;&#x2F;mvc:interceptor&gt;\n&lt;&#x2F;mvc:interceptors&gt;</code></pre>\n\n<p>前置1执行</p>\n<p>前置2执行</p>\n<p><strong>目标资源执行</strong></p>\n<p>postHandle2执行</p>\n<p>postHandle1执行</p>\n<p>afterCompletion2执行</p>\n<p>afterCompletion1执行</p>\n<p>（有种后进先出的意味）</p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141210848.png\" alt=\"image-20220107141210848\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141221444.png\" alt=\"image-20220107141221444\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141232183.png\" alt=\"image-20220107141232183\"></p>\n<h3 id=\"前端控制器DispatcherServlet的核心配置文件：\"><a href=\"#前端控制器DispatcherServlet的核心配置文件：\" class=\"headerlink\" title=\"前端控制器DispatcherServlet的核心配置文件：\"></a>前端控制器DispatcherServlet的核心配置文件：</h3><p>使用 springMVC 必须配置的三大件：</p>\n<p><strong>处理器映射器、处理器适配器、视图解析器</strong></p>\n<p>处理器映射器：RequestMappingHandleMapping</p>\n<p>处理器适配器：RequestMappingHandleAdapter</p>\n<p>视图解析器：InternalResourceViewResolver</p>\n<p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>**处理器映射器*<em><strong>和</strong>处理器适配器</em>*只需要开启</strong>**注解驱动****即可，而省去了大段的 xml 配置。这就是配置spring-mvc第一步注解驱动的作用。</p>\n<p>spring环境搭建步骤:</p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141245589.png\" alt=\"image-20220107141245589\"></p>\n<h1 id=\"搭建spring项目：\"><a href=\"#搭建spring项目：\" class=\"headerlink\" title=\"搭建spring项目：\"></a>搭建spring项目：</h1><h2 id=\"web-xml：\"><a href=\"#web-xml：\" class=\"headerlink\" title=\"web.xml：\"></a>web.xml：</h2><!--全局的初始化参数-->\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;context-param&gt;\n    &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n    &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;\n&lt;&#x2F;context-param&gt;</code></pre>\n\n<!--Spring的监听器-->\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;listener&gt;\n   &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;\n&lt;&#x2F;listener&gt;</code></pre>\n\n<!--SpringMVC的前端控制器-->\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> &lt;servlet&gt;\n     &lt;servlet-name&gt;DispatcherServlet&lt;&#x2F;servlet-name&gt;\n     &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;\n     &lt;init-param&gt;\n         &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;\n         &lt;param-value&gt;classpath:spring-mvc.xml&lt;&#x2F;param-value&gt;\n     &lt;&#x2F;init-param&gt;\n     &lt;load-on-startup&gt;2&lt;&#x2F;load-on-startup&gt;&#x2F;&#x2F;在服务器启动时加载 1或2都行\n &lt;&#x2F;servlet&gt;\n&lt;servlet-mapping&gt;\n     &lt;servlet-name&gt;DispatcherServlet&lt;&#x2F;servlet-name&gt;\n     &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;\n &lt;&#x2F;servlet-mapping&gt;</code></pre>\n\n<h2 id=\"spring-mvc-xml\"><a href=\"#spring-mvc-xml\" class=\"headerlink\" title=\"spring-mvc.xml\"></a>spring-mvc.xml</h2><!--1.mvc注解驱动-->\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;mvc:annotation-driven&#x2F;&gt;</code></pre>\n\n<!--2、配置视图解析器-->\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;\n    &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;pages&#x2F;&quot;&#x2F;&gt;  &#x2F;&#x2F;前缀，value是位置\n    &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;     &#x2F;&#x2F;后缀，value是文件的后缀\n&lt;&#x2F;bean&gt;</code></pre>\n\n<!--3、静态资源权限开放-->\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;mvc:default-servlet-handler&#x2F;&gt;</code></pre>\n\n<h2 id=\"applicationContext-xml\"><a href=\"#applicationContext-xml\" class=\"headerlink\" title=\"applicationContext.xml\"></a>applicationContext.xml</h2><!--1、加载jdbc.properties-->\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;context:property-placeholder location&#x3D;&quot;classpath:jdbc.properties&quot;&#x2F;&gt;</code></pre>\n\n<!--2、配置数据源对象-->\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;\n    &lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<!--3、配置JdbcTemplate对象-->\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;bean id&#x3D;&quot;jdbcTemplate&quot; class&#x3D;&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;\n    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;\n&lt;&#x2F;bean&gt;</code></pre>\n\n<!--4、配置业务-->\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--配置RoleDao--&gt;\n&lt;bean id&#x3D;&quot;roleDao&quot; class&#x3D;&quot;com.itheima.dao.impl.RoleDaoImpl&quot;&gt;\n    &lt;property name&#x3D;&quot;jdbcTemplate&quot; ref&#x3D;&quot;jdbcTemplate&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n   \n&lt;!--配置UserDao--&gt;\n&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.itheima.dao.impl.UserDaoImpl&quot;&gt;\n    &lt;property name&#x3D;&quot;jdbcTemplate&quot; ref&#x3D;&quot;jdbcTemplate&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n    \n&lt;!--配置RoleService--&gt;\n&lt;bean id&#x3D;&quot;roleService&quot; class&#x3D;&quot;com.itheima.service.impl.RoleServiceImpl&quot;&gt;\n    &lt;property name&#x3D;&quot;roleDao&quot; ref&#x3D;&quot;roleDao&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n\n&lt;!--配置UserService--&gt;\n&lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.itheima.service.impl.UserServiceImpl&quot;&gt;\n    &lt;property name&#x3D;&quot;userDao&quot; ref&#x3D;&quot;userDao&quot;&#x2F;&gt;\n    &lt;property name&#x3D;&quot;roleDao&quot; ref&#x3D;&quot;roleDao&quot;&#x2F;&gt;\n&lt;&#x2F;bean&gt;\n</code></pre>\n\n<p>页面form表单内的元素name必须和对象的属性名一致，springmvc才能自动封装</p>\n<p>提交方式post有乱码问题，需要设置编码，filter，在web.xml设置过滤器</p>\n<!--解决乱码的过滤器-->\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;filter&gt;\n    &lt;filter-name&gt;CharacterEncodingFilter&lt;&#x2F;filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;\n        &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;\n    &lt;&#x2F;init-param&gt;\n&lt;&#x2F;filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;CharacterEncodingFilter&lt;&#x2F;filter-name&gt;\n    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;\n&lt;&#x2F;filter-mapping&gt;</code></pre>\n\n<p>spring重定向的方式：return “redirect: 地址 “;</p>\n<p><strong>@PathVariable 是 spring3.0 的一个新功能：接收请求路径中占位符的值</strong></p>\n<p>mybatis</p>\n<p>核心配置文件（sqlMapperConfig.xml）的约束</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</code></pre>\n\n<p>映射配置文件（xxx.xml）的约束</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</code></pre>\n\n<p>application context</p>\n<p>应用上下文 项目的访问路径 虚拟目录</p>\n<p>index.jsp 访问时可以不写</p>\n<p>tomcat启动后在浏览器不仅可以访问网页还可以访问目录下的资源（image等）</p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141300625.png\" alt=\"image-20220107141300625\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141318483.png\" alt=\"image-20220107141318483\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141332141.png\" alt=\"image-20220107141332141\"></p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141407329.png\" alt=\"image-20220107141407329\"></p>\n<p>mybatis分页插件依赖（用以下版本，其他版本可能会报错）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;dependency&gt;\n    &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;pagehelper&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.7.5&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.github.jsqlparser&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;jsqlparser&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>typeHandler 类型处理器 </p>\n<p><img src=\"http://image.1carus.xyz/image-20220107141529196.png\" alt=\"image-20220107141529196\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;mapper namespace&#x3D;&quot;com.icarus.dao.FavoriteMapper&quot;&gt;\n    &lt;resultMap id&#x3D;&quot;favoriteMap&quot; type&#x3D;&quot;favorite&quot;&gt;\n&lt;!--        手动指定字段和实体属性映射关系--&gt;\n&lt;!--        column：数据表的字段名称--&gt;\n&lt;!--        property：实体属性名称--&gt;\n        &lt;id  column&#x3D;&quot;rid&quot; property&#x3D;&quot;rid&quot;&gt;&lt;&#x2F;id&gt;\n        &lt;result column&#x3D;&quot;DATE&quot; property&#x3D;&quot;date&quot;&gt;&lt;&#x2F;result&gt;\n&lt;!--        &lt;result column&#x3D;&quot;uid&quot; property&#x3D;&quot;uid&quot;&gt;&lt;&#x2F;result&gt;--&gt;\n\n&lt;!--        &lt;result column&#x3D;&quot;username&quot;  property&#x3D;&quot;user.username&quot;&gt;&lt;&#x2F;result&gt;--&gt;\n&lt;!--        &lt;result column&#x3D;&quot;password&quot; property&#x3D;&quot;user.password&quot;&gt;&lt;&#x2F;result&gt;--&gt;\n&lt;!--        &lt;result column&#x3D;&quot;name&quot; property&#x3D;&quot;user.name&quot;&gt;&lt;&#x2F;result&gt;--&gt;\n&lt;!--        &lt;result column&#x3D;&quot;birthday&quot; property&#x3D;&quot;user.birthday&quot;&gt;&lt;&#x2F;result&gt;--&gt;\n&lt;!--        &lt;result column&#x3D;&quot;sex&quot; property&#x3D;&quot;user.sex&quot;&gt;&lt;&#x2F;result&gt;--&gt;\n&lt;!--        &lt;result column&#x3D;&quot;telephone&quot; property&#x3D;&quot;user.telephone&quot;&gt;&lt;&#x2F;result&gt;--&gt;\n&lt;!--        &lt;result column&#x3D;&quot;email&quot; property&#x3D;&quot;user.email&quot;&gt;&lt;&#x2F;result&gt;--&gt;\n\n&lt;!--        property:当前实体order中的属性名称--&gt;\n&lt;!--        javatype：当前实体中的属性名称--&gt;\n        &lt;association property&#x3D;&quot;user&quot; javaType&#x3D;&quot;user&quot;&gt;\n            &lt;id column&#x3D;&quot;username&quot; property&#x3D;&quot;username&quot;&#x2F;&gt;\n            &lt;id column&#x3D;&quot;password&quot; property&#x3D;&quot;password&quot;&#x2F;&gt;\n            &lt;id column&#x3D;&quot;name&quot; property&#x3D;&quot;name&quot;&#x2F;&gt;\n            &lt;id column&#x3D;&quot;birthday&quot; property&#x3D;&quot;birthday&quot;&#x2F;&gt;\n            &lt;id column&#x3D;&quot;sex&quot; property&#x3D;&quot;sex&quot;&#x2F;&gt;\n            &lt;id column&#x3D;&quot;telephone&quot; property&#x3D;&quot;telephone&quot;&#x2F;&gt;\n            &lt;id column&#x3D;&quot;email&quot; property&#x3D;&quot;email&quot;&#x2F;&gt;\n        &lt;&#x2F;association&gt;\n    &lt;&#x2F;resultMap&gt;\n    &lt;select id&#x3D;&quot;findAll&quot; resultMap&#x3D;&quot;favoriteMap&quot;&gt;\n        SELECT o.rid,o.DATE,u.username,u.&#96;PASSWORD&#96;,u.&#96;NAME&#96;,u.birthday,u.sex,u.telephone,u.email FROM tab_favorite o, tab_user u where o.uid&#x3D;u.uid\n    &lt;&#x2F;select&gt;\n&lt;&#x2F;mapper&gt;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;\n        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n&lt;!--    通过properties标签加载外部properties文件--&gt;\n    &lt;properties resource&#x3D;&quot;jdbc.properties&quot;&gt;&lt;&#x2F;properties&gt;\n    &lt;!--    自定义别名--&gt;\n    &lt;typeAliases&gt;\n        &lt;typeAlias type&#x3D;&quot;com.icarus.Domain&quot; alias&#x3D;&quot;Domain&quot;&#x2F;&gt;\n        &lt;typeAlias type&#x3D;&quot;com.icarus.domain.Favorite&quot; alias&#x3D;&quot;favorite&quot;&#x2F;&gt;\n        &lt;typeAlias type&#x3D;&quot;com.icarus.domain.User&quot; alias&#x3D;&quot;user&quot;&#x2F;&gt;\n        &lt;typeAlias type&#x3D;&quot;com.icarus.dao.FavoriteMapper&quot; alias&#x3D;&quot;favoriteMapper&quot;&#x2F;&gt;\n        &lt;typeAlias type&#x3D;&quot;com.icarus.dao.UserMapper&quot; alias&#x3D;&quot;userMapper&quot;&#x2F;&gt;\n\n    &lt;&#x2F;typeAliases&gt;\n&lt;!--    注册数据类型转换器--&gt;\n&lt;!--    &lt;typeHandlers&gt;--&gt;\n&lt;!--        &lt;typeHandler handler&#x3D;&quot;com.icarus.utils.DateTypeHandler&quot;&gt;&lt;&#x2F;typeHandler&gt;--&gt;\n&lt;!--    &lt;&#x2F;typeHandlers&gt;--&gt;\n&lt;!--    数据源环境--&gt;\n    &lt;plugins&gt;\n        &lt;plugin interceptor&#x3D;&quot;com.github.pagehelper.PageHelper&quot;&gt;\n            &lt;property name&#x3D;&quot;dialect&quot; value&#x3D;&quot;mysql&quot;&#x2F;&gt;\n        &lt;&#x2F;plugin&gt;\n    &lt;&#x2F;plugins&gt;\n    &lt;environments default&#x3D;&quot;development&quot;&gt;\n        &lt;environment id&#x3D;&quot;development&quot;&gt;\n            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&gt;&lt;&#x2F;transactionManager&gt;\n            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;\n                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot;&#x2F;&gt;\n                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;\n                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;\n                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;\n            &lt;&#x2F;dataSource&gt;\n        &lt;&#x2F;environment&gt;\n    &lt;&#x2F;environments&gt;\n&lt;!--    加载映射文件--&gt;\n    &lt;mappers&gt;\n        &lt;mapper resource&#x3D;&quot;com&#x2F;icarus.mapper&#x2F;UserMapper.xml&quot;&#x2F;&gt;\n        &lt;mapper resource&#x3D;&quot;com&#x2F;icarus.mapper&#x2F;FavariteMapper.xml&quot;&#x2F;&gt;\n    &lt;&#x2F;mappers&gt; \n\n\n&lt;&#x2F;configuration&gt;</code></pre>\n\n<p>配置文件中 xmlns：context 是注解约束，使用注解开发配置文件要加入该约束。</p>\n<p>使用事务注解时如果代码内有trycatch会使事务失效</p>\n<p>Mapper代理开发：</p>\n<p>1.接口所在位置必须和映射文件位置一致（如果xml文件放在resource，必须在resource创建跟接口一样的全限定名文件夹）</p>\n<p>2.接口名称必须和映射文件名称一致</p>\n<p>3.接口的全限定名必须和namespace 一致</p>\n<p>接口中的方法名 需要和对应的标签一致 id 一样</p>\n<p><strong>多个实现类如何注入？</strong></p>\n<p>如果一个接口有两个实现类 ，在autowied注入时，在@Autowied下面加个@Qualifier （”要使用的实现类”）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Repository（value&#x3D;“daoRedis”）\npublic class IUserDaoImpl2 implements IUserDao&#123;\n代码~\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">@Autowired\n\n@Qualifier（value&#x3D;“daoRedis”）\n\nprivate IUserDao userDao；</code></pre>\n\n<p>也可以用jdk自带的注解@Resource 替代@Qualifier，使用方法：@Resource (name=“daoMyBatis” )</p>\n<p>如果jdk版本过高（14 15） @Resource 可能有版本冲突问题 </p>\n<p>要把除了三层架构外的类放到spring容器中，使用@Component注解</p>\n<p>@Component(“pb”)  //给这个bean设置一个key名字，spring容器都是map key-value</p>\n<p>public class Product( ){</p>\n<p>}</p>\n<p>点进注解，如果里面有value属性，value就可以省略，如 @Component(value=”pb”)——&gt; @Component(“pb”) </p>\n<p>@Value 注解内部：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public @interface Value&#123;\n\n​\t\tString value()；\n\n&#125;</code></pre>\n\n<p><strong>纯注解开发：</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;配置类 代替配置文件 beans 后面的约束\n@Configuration\n@ComponentScan(value &#x3D; &quot;com.icis&quot;)&#x2F;&#x2F;代替包扫描\n@Import(value &#x3D; &#123;SpringJdbcConfiguration.class,\n        SpringMapperConfigurarion.class&#125;)\npublic class SpringConfiguration &#123;</code></pre>\n\n<p>@Bean 把方法的返回值放到spring容器中</p>\n<p>该注解只能写在方法上，表明使用此方法创建一个对象，并且交给spring管理</p>\n<p>举例:  将jdbcTemplate放到容器中</p>\n<p>@Bean</p>\n<p>public JdbcTemplate getJdbcTemplate(){</p>\n<p>JdbcTemplate jdbcTemplate = new JdbcTemplate();</p>\n<p>return jdbcTemplate;</p>\n<p>}</p>\n<p>如果有多个数据源，在配置类参数使用@Qualifier(“ “)来指定</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;配置类 代替配置文件 beans 后面的约束\n@Configuration\n@ComponentScan(value &#x3D; &quot;com.icis&quot;)\n@Import(value &#x3D; &#123;SpringJdbcConfiguration.class,\n        SpringMapperConfigurarion.class&#125;)\npublic class SpringConfiguration &#123;\n    &#x2F;&#x2F; 创建一个jdbdTemplate 放入到spring 容器\n    @Bean(name &#x3D; &quot;temp1&quot;)\n    public JdbcTemplate getTemplate(@Qualifier(&quot;druidDs1&quot;) DataSource ds)&#123;&#x2F;&#x2F; 方法形参  会去容器中找\n        JdbcTemplate jdbcTemplate&#x3D;new JdbcTemplate(ds);\n        return  jdbcTemplate;\n    &#125;\n\n&#125;\n    &#x2F;&#x2F; 定义方法 创建数据源\n    @Bean(name &#x3D; &quot;druidDs1&quot;)\n    public DataSource getDruidDs2()&#123;\n        DruidDataSource ds&#x3D;new DruidDataSource();\n        &#x2F;&#x2F; 设置数据库连接属性\n        ds.setDriverClassName(driverClassName);\n        ds.setUrl(url);\n        ds.setUsername(username);\n        ds.setPassword(password);\n\n        return  ds;\n    &#125;\t\n    @Bean(name &#x3D; &quot;druidDs2&quot;)\n    public DataSource getDruidDs1()&#123;\n        DruidDataSource ds&#x3D;new DruidDataSource();\n        &#x2F;&#x2F; 设置数据库连接属性\n        ds.setDriverClassName(driverClassName);\n        ds.setUrl(url);\n        ds.setUsername(username);\n        ds.setPassword(password);\n\n        return  ds;\n    &#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 如果需要加载类路径下文件 需要在文件名前加  classpath:\n@PropertySource(value &#x3D; &quot;classpath:db.properties&quot;)\npublic class SpringJdbcConfiguration &#123;\n    &#x2F;&#x2F; 配置数据库相关操作\n    &#x2F;&#x2F; 注入配置文件中数据 需要使用springEl $&#123;key&#125;\n    @Value(&quot;$&#123;db.driverClassName&#125;&quot;)\n    private String driverClassName;\n    @Value(&quot;$&#123;db.url&#125;&quot;)\n    private String url;\n    @Value(&quot;$&#123;db.username&#125;&quot;)\n    private String username;\n    @Value(&quot;$&#123;db.password&#125;&quot;)\n    private String password;</code></pre>\n\n<p>xml配置mysql</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;\n       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;\n       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;\n       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans\nhttp:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd\nhttp:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context\nhttp:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd\nhttp:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop\nhttp:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd\n&quot;&gt;\n    &lt;!--包扫描--&gt;\n    &lt;context:component-scan base-package&#x3D;&quot;com.icis&quot;&#x2F;&gt;\n    &lt;!--加载属性文件--&gt;\n    &lt;context:property-placeholder location&#x3D;&quot;classpath:db.properties&quot;&#x2F;&gt;\n &lt;!--配置两个bean DataSource JdbcTemplate--&gt;\n    &lt;bean id&#x3D;&quot;druidDs&quot; class&#x3D;&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;\n        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;db.driverClassName&#125;&quot;&#x2F;&gt;\n        &lt;!--@Value(&quot;$&#123;&#125;&quot;)--&gt;\n        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;db.url&#125;&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;db.username&#125;&quot;&#x2F;&gt;\n        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;db.password&#125;&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n\n    &lt;bean id&#x3D;&quot;temp2&quot; class&#x3D;&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;\n        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;druidDs&quot;&#x2F;&gt;\n    &lt;&#x2F;bean&gt;\n&lt;&#x2F;beans&gt;</code></pre>\n\n<p>纯注解配置mysql：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">\n&#x2F;&#x2F;主配置类 代替配置文件 beans 后面的约束\n@Configuration\n@ComponentScan(value &#x3D; &quot;com.icis&quot;)\n@Import(value &#x3D; &#123;SpringJdbcConfiguration.class,\n        SpringMapperConfigurarion.class&#125;)\npublic class SpringConfiguration &#123;\n    &#x2F;&#x2F; 创建一个jdbdTemplate 放入到spring 容器\n    @Bean(name &#x3D; &quot;temp1&quot;)\n    public JdbcTemplate getTemplate(@Qualifier(&quot;druidDs1&quot;) DataSource ds)&#123;&#x2F;&#x2F; 方法形参  会去容器中找\n        JdbcTemplate jdbcTemplate&#x3D;new JdbcTemplate(ds);\n        return  jdbcTemplate;\n    &#125;\n&#125;\n\n&#x2F;&#x2F;副配置类\n&#x2F;&#x2F; 如果需要加载类路径下文件 需要在文件名前加  classpath:\n@PropertySource(value &#x3D; &quot;classpath:db.properties&quot;)\npublic class SpringJdbcConfiguration &#123;\n    &#x2F;&#x2F; 配置数据库相关操作\n    &#x2F;&#x2F; 注入配置文件中数据 需要使用springEl $&#123;key&#125;\n    @Value(&quot;$&#123;db.driverClassName&#125;&quot;)\n    private String driverClassName;\n    @Value(&quot;$&#123;db.url&#125;&quot;)\n    private String url;\n    @Value(&quot;$&#123;db.username&#125;&quot;)\n    private String username;\n    @Value(&quot;$&#123;db.password&#125;&quot;)\n    private String password;\n\n\n\n    &#x2F;&#x2F; 定义方法 创建数据源\n    @Bean(name &#x3D; &quot;druidDs1&quot;)\n    public DataSource getDruidDs2()&#123;\n        DruidDataSource ds&#x3D;new DruidDataSource();\n        &#x2F;&#x2F; 设置数据库连接属性\n        ds.setDriverClassName(driverClassName);\n        ds.setUrl(url);\n        ds.setUsername(username);\n        ds.setPassword(password);\n\n        return  ds;\n    &#125;\n\n    @Bean(name &#x3D; &quot;druidDs2&quot;)\n    public DataSource getDruidDs1()&#123;\n        DruidDataSource ds&#x3D;new DruidDataSource();\n        &#x2F;&#x2F; 设置数据库连接属性\n        ds.setDriverClassName(driverClassName);\n        ds.setUrl(url);\n        ds.setUsername(username);\n        ds.setPassword(password);\n\n        return  ds;\n    &#125;\n&#125;\n&#x2F;&#x2F;副配置类\n&#x2F;&#x2F; 映射器  bean-json 配置类\npublic class SpringMapperConfigurarion &#123;\n\n    @Bean\n    public ObjectMapper objectMapper()&#123;\n        return  new ObjectMapper();\n    &#125;\n&#125;\n</code></pre>\n\n<p>将ObjectMapper注册（放）到spring，</p>\n<p>注解方式:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 映射器  bean-json 配置类\npublic class SpringMapperConfigurarion &#123;\n\n    @Bean\n    public ObjectMapper objectMapper()&#123;\n        return  new ObjectMapper();\n    &#125;\n&#125;</code></pre>\n\n<p>spring整合junit 为什么要整合？</p>\n<p>因为spring和junit是两个环境或者说是两个容器，一个容器去另一个容器取东西必须做整合</p>\n<p>所以maven要引入 spring-test这个包</p>\n<p>spring整合junit 整合步骤：</p>\n<ol>\n<li><p>maven引入spring-test这个包</p>\n</li>\n<li><p>在测试类上添加两个注解</p>\n</li>\n<li><p>```java<br>@RunWith(SpringJUnit4ClassRunner.class)//spring-test带的<br>@ContextConfiguration(classes = SpringConfiguration.class)//主配置类<br>public class EmployeeTest1 {</p>\n<pre><code>@Autowired\nprivate EmployeeController employeeController;\n@Test\npublic void getEmpListTest1()&#123;\n    String empJson = this.employeeController.getEmpJson();\n    System.out.println(&quot;获得数据是：&quot;+empJson);\n&#125;\n</code></pre>\n<p>}</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n转换json的两个实体注解：\n\n&#96;&#96;&#96;java\n&#x2F;&#x2F;  @JsonIgnore 忽略该字段转换json\n  private Double salary;\n  &#x2F;&#x2F; 默认  显示的毫秒值\n  @JsonFormat(pattern &#x3D; &quot;yyyy&#x2F;MM&#x2F;dd&quot;,timezone &#x3D; &quot;GMT+8&quot;)\n  private Date joinDate;</code></pre></li>\n</ol>\n<p>ObjectMapper   xml的配置方法：</p>\n<p><bean id=\"jsonMapper\" class=\"com.fasterxml.jackson.databind.ObjectMapper\"></bean></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;执行分页操作\nPage&lt;s&gt; pageBean &#x3D; PageHelper.startPage(currentPage, pageSize);</code></pre>","text":"Spring 导入Spring开发的基本包坐标 编写Dao接口和实现类 创建Spring核心配置文件 在Spring配置文件中配置UserDaoImpl 使用Spring的API获得Bean实例 Spring的重点配置 Spring原始注解 spring集成web环境步骤 视图解...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"java","slug":"java","count":3,"path":"api/categories/java.json"}],"tags":[{"name":"Spring","slug":"Spring","count":1,"path":"api/tags/Spring.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%99%A8DispatcherServlet%E7%9A%84%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">前端控制器DispatcherServlet的核心配置文件：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%90%AD%E5%BB%BAspring%E9%A1%B9%E7%9B%AE%EF%BC%9A\"><span class=\"toc-text\">搭建spring项目：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#web-xml%EF%BC%9A\"><span class=\"toc-text\">web.xml：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#spring-mvc-xml\"><span class=\"toc-text\">spring-mvc.xml</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#applicationContext-xml\"><span class=\"toc-text\">applicationContext.xml</span></a>","author":{"name":"icarus","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"码龄：1年","socials":{"github":"https://github.com/icarusice","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_43287808","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"RequestMapping注解","uid":"dae83d1c88f5937753ca40f0c60cab64","slug":"@RequestMapping注解","date":"2021-11-07T14:32:21.000Z","updated":"2022-01-07T15:00:24.874Z","comments":true,"path":"api/articles/@RequestMapping注解.json","keywords":"Java","cover":null,"text":"@RequestMapping注解一个用来处理请求地址映射的注解，可用于类或方法上。 用于类上，表示类中的所有请求的方法都是以该地址作为父路径@RestController @RequestMapping(&quot;&#x2F;test&quot;) public class ...","link":"","photos":[],"count_time":{"symbolsCount":605,"symbolsTime":"1 mins."},"categories":[{"name":"java","slug":"java","count":3,"path":"api/categories/java.json"}],"tags":[{"name":"spring","slug":"spring","count":1,"path":"api/tags/spring.json"}],"author":{"name":"icarus","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"码龄：1年","socials":{"github":"https://github.com/icarusice","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_43287808","juejin":"","customs":{}}}},"next_post":{"title":"MVVM模式","uid":"20496ea705d490e685d32b89838c0b41","slug":"MVVM 模式理解","date":"2021-10-07T14:32:21.000Z","updated":"2022-01-15T16:52:54.970Z","comments":true,"path":"api/articles/MVVM 模式理解.json","keywords":"Java","cover":[],"text":"MVVM 模式理解（转） MVVM 是 Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对 View 和 ViewModel 的双向数据绑定，这使得 ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。 Vu...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":1,"path":"api/categories/前端.json"}],"tags":[{"name":"vue","slug":"vue","count":1,"path":"api/tags/vue.json"}],"author":{"name":"icarus","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"码龄：1年","socials":{"github":"https://github.com/icarusice","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_43287808","juejin":"","customs":{}}}}}