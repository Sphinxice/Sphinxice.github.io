{"title":"linux命令","uid":"8f70db8533248a1b0253678490da59d6","slug":"linux命令3","date":"2022-01-18T14:32:21.000Z","updated":"2022-01-18T03:03:11.389Z","comments":true,"path":"api/articles/linux命令3.json","keywords":"Java","cover":null,"content":"<p>linux命令3</p>\n<p>touch命令 </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ touch testfile                #修改文件时间属性为当前系统时间  \n$ ls -l testfile                #查看文件的时间属性  </code></pre>\n\n<p>使用指令 “touch” 时，如果指定的文件不存在，则将创建一个新的空白文件</p>\n<p>echo “hello” &gt;c.txt 创建c.txt文件并写入“hello”</p>\n<p><strong>more 命令</strong> 查看文件内容，支持翻页查看，而cat命令适合查看内容少的文件</p>\n<p><strong>tail命令</strong>  ：默认显示最后十行</p>\n<p>tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p>\n<ul>\n<li>-f 循环读取</li>\n<li>-q 不显示处理信息</li>\n<li>-v 显示详细的处理信息</li>\n<li>-c &lt;数目&gt; 显示的字节数</li>\n<li>-n &lt;行数&gt; 显示文件的尾部 n 行内容</li>\n<li>–pid=PID 与 - f 合用，表示在进程 ID,PID 死掉之后结束</li>\n<li>-q, –quiet, –silent 从不输出给出文件名的首部</li>\n<li>-s, –sleep-interval=S 与 - f 合用，表示在每次反复的间隔休眠 S 秒</li>\n</ul>\n<p>显示文件 notes.log 的内容，从第 20 行至文件末尾:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">tail -n +20 notes.log</code></pre>\n\n<p>显示文件 notes.log 的最后 10 个字符:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">tail -c 10 notes.log</code></pre>\n\n<p>要跟踪名为 notes.log 的文件的增长情况，也就是实时查看：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">tail -f notes.log</code></pre>\n\n<p><strong>ls命令</strong>   列出文件夹下默认的文件夹和文件。</p>\n<p>Linux 中 ls 命令可以用来查看系统上的文件、目录和设备的权限：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># ls -l\ntotal 20\n-rw-rw-r-- 1 ivan1001 ivan1001    0 Apr 29 07:52 file1\n-rw-rw-r-- 1 ivan1001 ivan1001    0 Apr 29 07:52 file2\n-rw-rw-r-- 1 ivan1001 ivan1001    0 Apr 29 07:52 file3\n-rwxrwxr-x 1 ivan1001 ivan1001 7348 Apr 29 07:53 myproc\n-rw-rw-r-- 1 ivan1001 ivan1001  126 Apr 29 07:53 myproc.c\ndrwxrwxr-x 2 ivan1001 ivan1001 4096 Apr 29 07:54 test1\ndrwxrwxr-x 2 ivan1001 ivan1001 4096 Apr 29 07:54 test2</code></pre>\n\n<p>输出结果的第一个字段是描述文件和目录权限的码。这个字段的第一个字符代表了对象的类型：</p>\n<ul>\n<li><ul>\n<li>代表文件</li>\n</ul>\n</li>\n<li>d 代表目录</li>\n<li>l 代表链接</li>\n<li>c 代表字符型设备</li>\n<li>b 代表块设备</li>\n<li>n 代表网络设备</li>\n</ul>\n<p>如果没有某种权限，在该权限位出现单破折线。则 3 组三字码分别对应对象的 3 个安全级别：</p>\n<ul>\n<li>对象的属主</li>\n<li>对象的属组</li>\n<li>系统其它用户</li>\n</ul>\n<p>下面以 myproc 文件为例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># ls -l myproc\n-rwxrwxr-x 1 ivan1001 ivan1001 7348 Apr 29 07:53 myproc</code></pre>\n\n<p>文件 myproc 有下面 3 组权限：</p>\n<ul>\n<li>rgw: 文件的属主（设为登录名 ivan1001)</li>\n<li>rgw: 文件的属组（设为组名 ivan1001)</li>\n<li>r-x: 系统上其它人</li>\n</ul>\n<p>这些权限说明登录名为 ivan1001 的用户可以读取、写入以及执行这个文件（可以看做有全部权限）。类似地，属组 ivan1001 的成员也可以读取、写入和执行这个文件。然而不属于 ivan1001 组的其他用户只能读取和执行这个文件： w 被单破折线取代了，说明这个安全级别没有写入权限。</p>\n<p><strong>ll命令</strong> 列出各个文件详细信息</p>\n<h2 id=\"linux常用命令2\"><a href=\"#linux常用命令2\" class=\"headerlink\" title=\"linux常用命令2\"></a>linux常用命令2</h2><p>ssh ip  连接远程服务器<br>pwd 查看当前目录位置<br>ipconfig 查看网络设备状态<br>free －h 查看内存<br>df -lh 查看磁盘空间情况<br>ls 查看当前目录文件<br>du -sh * 查看各个文件所占空间<br>cat 查看某个文件内容<br>uname -a 查看系统版本<br>安装软件 yum install 软件名<br>which java 查看java存放位置<br>wget url.tar 下载网路上的某个压缩包<br>tar 命令 解压<br>mv 改名 移动，<br>nohup后台启动<br>jobs查看当前任务<br>ps 查看当前进程 top也可以<br>chomd 设置权限 r4w2x1 </p>\n<p>查看文件 a.txt 的第 190 行到 196 行，sed -n ‘190,196p’ a.txt<br>G 跳转到末行的起始位置是对的，一般我用 gg 跳转到行首。<br>netstat # 查看网络状态．<br>ipconfig 查看ip配置</p>\n<h2 id=\"linux常用命令1\"><a href=\"#linux常用命令1\" class=\"headerlink\" title=\"linux常用命令1\"></a>linux常用命令1</h2><ol>\n<li><strong>cd 命令</strong>，用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。</li>\n</ol>\n<p>cd /home 进入 ‘/home’ 目录</p>\n<p>cd .. 返回上一级目录</p>\n<p>cd ../.. 返回上两级目录</p>\n<p>cd 进入个人的主目录</p>\n<p>cd ~user1 进入个人的主目录</p>\n<p>cd - 返回上次所在的目录</p>\n<ol start=\"2\">\n<li><strong>pwd 命令</strong>，显示工作路径</li>\n</ol>\n<p>[root@mailvip ~]# pwd</p>\n<p>/root</p>\n<ol start=\"3\">\n<li><strong>ls 命令</strong>，查看文件与目录的命令，list 之意</li>\n</ol>\n<p>ls 查看目录中的文件</p>\n<p>ls -l 显示文件和目录的详细资料</p>\n<p>ls -a 列出全部文件，包含隐藏文件</p>\n<p>ls -R 连同子目录的内容一起列出 (递归列出)，等于该目录下的所有文件都会显示出来</p>\n<p>ls [0-9] 显示包含数字的文件名和目录名</p>\n<ol start=\"4\">\n<li>cp 命令，用于复制文件，copy 之意，它还可以把多个文件一次性地复制到一个目录下</li>\n</ol>\n<p>-a ：将文件的特性一起复制</p>\n<p>-p ：连同文件的属性一起复制，而非使用默认方式，与 - a 相似，常用于备份</p>\n<p>-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行</p>\n<p>-r ：递归持续复制，用于目录的复制行为 // 经常使用递归复制</p>\n<p>-u ：目标文件与源文件有差异时才会复制</p>\n<p>\\5. mv 命令，用于移动文件、目录或更名，move 之意</p>\n<p>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</p>\n<p>-i ：若目标文件已经存在，就会询问是否覆盖</p>\n<p>-u ：若目标文件已经存在，且比目标文件新，才会更新</p>\n<ol start=\"6\">\n<li>rm 命令，用于删除文件或目录，remove 之意</li>\n</ol>\n<p>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告消息</p>\n<p>-i ：互动模式，在删除前会询问用户是否操作</p>\n<p>-r ：递归删除，最常用于目录删除，它是一个非常危险的参数</p>\n<p>二、查看文件内容</p>\n<ol start=\"7\">\n<li>cat 命令，用于查看文本文件的内容，后接要查看的文件名，通常可用管道与 more 和 less 一起使用</li>\n</ol>\n<p>cat file1 从第一个字节开始正向查看文件的内容</p>\n<p>tac file1 从最后一行开始反向查看一个文件的内容</p>\n<p>cat -n file1 标示文件的行数</p>\n<p>more file1 查看一个长文件的内容</p>\n<p>head -n 2 file1 查看一个文件的前两行</p>\n<p>tail -n 2 file1 查看一个文件的最后两行</p>\n<p>tail -n +1000 file1 从 1000 行开始显示，显示 1000 行以后的</p>\n<p>cat filename | head -n 3000 | tail -n +1000 显示 1000 行到 3000 行</p>\n<p>cat filename | tail -n +3000 | head -n 1000</p>\n<p>从第 3000 行开始，显示 1000 (即显示 3000~3999 行)</p>\n<p>三。文件搜索</p>\n<ol start=\"8\">\n<li>find 命令，用来查找系统的</li>\n</ol>\n<p>find / -name file1 从 ‘/‘ 开始进入根文件系统搜索文件和目录</p>\n<p>find / -user user1 搜索属于用户 ‘user1’ 的文件和目录</p>\n<p>find /usr/bin -type f -atime +100 搜索在过去 100 天内未被使用过的执行文件</p>\n<p>find /usr/bin -type f -mtime -10 搜索在 10 天内被创建或者修改过的文件</p>\n<p>whereis halt 显示一个二进制文件、源码或 man 的位置</p>\n<p>which halt 显示一个二进制文件或可执行文件的完整路径</p>\n<p>删除大于 50M 的文件：</p>\n<p>find /var/mail/ -size +50M -exec rm {} ;</p>\n<p>四。文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</p>\n<ol start=\"9\">\n<li>chmod 命令，改变文件 / 文件夹权限</li>\n</ol>\n<p>ls -lh 显示权限</p>\n<p>chmod ugo+rwx directory1 设置目录的所有人 (u)、群组 (g) 以及其他人 (o) 以读 (r，4</p>\n<p>)、写 (w，2) 和执行 (x，1) 的权限</p>\n<p>chmod go-rwx directory1 删除群组 (g) 与其他人 (o) 对目录的读写执行权限</p>\n<ol start=\"10\">\n<li>chown 命令，改变文件的所有者</li>\n</ol>\n<p>chown user1 file1 改变一个文件的所有人属性</p>\n<p>chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</p>\n<p>chown user1:group1 file1 改变一个文件的所有人和群组属性</p>\n<ol start=\"11\">\n<li>chgrp 命令，改变文件所属用户组</li>\n</ol>\n<p>chgrp group1 file1 改变文件的群组</p>\n<p>五。文本处理</p>\n<p>12.</p>\n<p>grep 命令，分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等</p>\n<p>grep Aug /var/log/messages 在文件 ‘/var/log/messages’ 中查找关键词 “Aug”</p>\n<p>grep ^Aug /var/log/messages 在文件 ‘/var/log/messages’ 中查找以 “Aug” 开始的词汇</p>\n<p>grep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行</p>\n<p>grep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串 “Aug”</p>\n<p>sed’s/stringa1/stringa2/g’ example.txt 将 example.txt 文件中的 “string1” 替换成</p>\n<p>“string2”</p>\n<p>sed ‘/^$/d’ example.txt 从 example.txt 文件中删除所有空白行</p>\n<ol start=\"13\">\n<li>paste 命令</li>\n</ol>\n<p>paste file1 file2 合并两个文件或两栏的内容</p>\n<p>paste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用 “+” 区分</p>\n<ol start=\"14\">\n<li>sort 命令</li>\n</ol>\n<p>sort file1 file2 排序两个文件的内容</p>\n<p>sort file1 file2 | uniq 取出两个文件的并集 (重复的行只保留一份)</p>\n<p>sort file1 file2 | uniq -u 删除交集，留下其他的行</p>\n<p>sort file1 file2 | uniq -d 取出两个文件的交集 (只留下同时存在于两个文件中的文件)</p>\n<ol start=\"15\">\n<li>comm 命令</li>\n</ol>\n<p>comm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容</p>\n<p>comm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容</p>\n<p>comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</p>\n<p>六、打包和压缩文件</p>\n<ol start=\"16\">\n<li>tar 命令，对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序 (如 gzip 和 bzip 等) 进行压缩和解压</li>\n</ol>\n<p>-c ：新建打包文件</p>\n<p>-t ：查看打包文件的内容含有哪些文件名</p>\n<p>-x ：解打包或解压缩的功能，可以搭配 - C (大写) 指定解压的目录，注意 - c,-t,-x 不能同时出现在同一条命令中</p>\n<p>-j ：通过 bzip2 的支持进行压缩 / 解压缩</p>\n<p>-z ：通过 gzip 的支持进行压缩 / 解压缩</p>\n<p>-v ：在压缩 / 解压缩过程中，将正在处理的文件名显示出来</p>\n<p>-f filename ：filename 为要处理的文件</p>\n<p>-C dir ：指定压缩 / 解压缩的目录 dir</p>\n<p>压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称查询：tar -jtv -f filename.tar.bz2</p>\n<p>解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</p>\n<p>bunzip2 file1.bz2 解压一个叫做 ‘file1.bz2’ 的文件</p>\n<p>bzip2 file1 压缩一个叫做 ‘file1’ 的文件</p>\n<p>gunzip file1.gz 解压一个叫做 ‘file1.gz’ 的文件</p>\n<p>gzip file1 压缩一个叫做 ‘file1’ 的文件</p>\n<p>gzip -9 file1 最大程度压缩</p>\n<p>rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包</p>\n<p>rar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’</p>\n<p>rar x file1.rar 解压 rar 包</p>\n<p>zip file1.zip file1 创建一个 zip 格式的压缩包</p>\n<p>unzip file1.zip 解压一个 zip 格式压缩包</p>\n<p>zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个 zip 格式的压缩包</p>\n<p>七。系统和关机 (关机、重启和登出)</p>\n<p>shutdown -h now 关闭系统 (1)</p>\n<p>init 0 关闭系统 (2)</p>\n<p>telinit 0 关闭系统 (3)</p>\n<p>shutdown -h hours:minutes &amp; 按预定时间关闭系统</p>\n<p>shutdown -c 取消按预定时间关闭系统</p>\n<p>shutdown -r now 重启 (1)</p>\n<p>reboot 重启 (2)</p>\n<p>logout 注销</p>\n<p>time 测算一个命令 (即程序) 的执行时间</p>\n<p>八、进程相关的命令</p>\n<ol start=\"17\">\n<li><strong>jps 命令</strong>，显示当前系统的 java 进程情况，及其 id 号</li>\n</ol>\n<p>jps (Java Virtual Machine Process Status Tool) 是 JDK</p>\n<p>1.5 提供的一个显示当前所有 java 进程 pid 的命令，简单实用，非常适合在 linux/unix 平台上简单察看当前 java 进程的一些简单情况。</p>\n<ol start=\"18\">\n<li><strong>ps 命令</strong>，用于将某个时间点的进程运行情况选取下来并输出，process 之意</li>\n</ol>\n<p>-A ：所有的进程均显示出来</p>\n<p>-a ：不与 terminal 有关的所有进程</p>\n<p>-u ：有效用户的相关进程</p>\n<p>-x ：一般与 a 参数一起使用，可列出较完整的信息</p>\n<p>-l ：较长，较详细地将 PID 的信息列出</p>\n<p>ps aux # 查看系统所有的进程数据</p>\n<p>ps ax # 查看不与 terminal 有关的所有进程</p>\n<p>ps -lA # 查看系统所有的进程数据</p>\n<p>ps axjf # 查看连同一部分进程树状态</p>\n<ol start=\"19\">\n<li><strong>kill 命令</strong>，用于向某个工作 (% jobnumber) 或者是某个 PID (数字) 传送一个信号，它通常与 ps 和 jobs 命令一起使用</li>\n</ol>\n<p>命令格式 : kill [命令参数][进程 id]</p>\n<p>命令参数:</p>\n<p>-l 信号，若果不加信号的编号参数，则使用 “-l” 参数会列出全部的信号名称</p>\n<p>-a 当处理当前进程时，不限制命令名和进程号的对应关系</p>\n<p>-p 指定 kill 命令只打印相关进程的进程号，而不发送任何信号</p>\n<p>-s 指定发送信号</p>\n<p>-u 指定用户</p>\n<p>实例 1：列出所有信号名称 命令：kill -l 输出：</p>\n<p>[root@localhost test6]# kill -l</p>\n<p>\\1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL</p>\n<p>\\5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE</p>\n<p>\\9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2</p>\n<p>\\13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT</p>\n<p>\\17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP</p>\n<p>\\21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU</p>\n<p>\\25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH</p>\n<p>\\29) SIGIO 30) SIGPWR 31) SIGSYS 34) SIGRTMIN</p>\n<p>\\35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4</p>\n<p>\\39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8</p>\n<p>\\43) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12</p>\n<p>\\47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14</p>\n<p>\\51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10</p>\n<p>\\55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6</p>\n<p>\\59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2</p>\n<p>\\63) SIGRTMAX-1 64) SIGRTMAX</p>\n<p>说明：</p>\n<p>只有第 9 种信号 (SIGKILL) 才可以无条件终止进程，其他信号进程都有权利忽略。 下面是常用的信号：</p>\n<p>HUP 1 终端断线</p>\n<p>INT 2 中断 (同 Ctrl + C)</p>\n<p>QUIT 3 退出 (同 Ctrl + )</p>\n<p>TERM 15 终止</p>\n<p>KILL 9 强制终止</p>\n<p>CONT 18 继续 (与 STOP 相反， fg/bg 命令)</p>\n<p>STOP 19 暂停 (同 Ctrl + Z)</p>\n<p>实例 2：得到指定信号的数值</p>\n<p>[root@localhost test6]# kill -l KILL</p>\n<p>[root@localhost test6]# kill -l SIGKILL</p>\n<p>[root@localhost test6]# kill -l TERM</p>\n<p>[root@localhost test6]# kill -l SIGTERM</p>\n<p>[root@localhost test6]#</p>\n<p>实例 3：先用 ps 查找进程，然后用 kill 杀掉</p>\n<p>命令：kill 3268</p>\n<p>[root@localhost test6]# ps -ef|grep vim</p>\n<p>root 3268 2884 0 16:21 pts/1 00:00:00 vim install.log</p>\n<p>root 3370 2822 0 16:21 pts/0 00:00:00 grep vim</p>\n<p>[root@localhost test6]# kill 3268</p>\n<p>实例 4：彻底杀死进程</p>\n<p>命令：kill –9 3268 // -9 强制杀掉进程</p>\n<ol start=\"20\">\n<li><strong>killall 命令</strong>，向一个命令启动的进程发送一个信号，用于杀死指定名字的进程</li>\n</ol>\n<p>命令格式 : killall [命令参数][进程名]</p>\n<p>命令参数：</p>\n<p>-Z 只杀死拥有 scontext 的进程</p>\n<p>-e 要求匹配进程名称</p>\n<p>-I 忽略小写</p>\n<p>-g 杀死进程组而不是进程</p>\n<p>-i 交互模式，杀死进程前先询问用户</p>\n<p>-l 列出所有的已知信号名称</p>\n<p>-q 不输出警告信息</p>\n<p>-s 发送指定的信号</p>\n<p>-v 报告信号是否成功发送</p>\n<p>-w 等待进程死亡</p>\n<p>–help 显示帮助信息</p>\n<p>–version 显示版本显示</p>\n<p>示例</p>\n<ol>\n<li>杀死所有同名进程</li>\n</ol>\n<p>killall nginx</p>\n<p>killall -9 bash</p>\n<ol start=\"2\">\n<li>向进程发送指定信号</li>\n</ol>\n<p>killall -TERM ngixn 或者 killall -KILL nginx</p>\n<ol start=\"21\">\n<li><strong>top 命令</strong>，是 Linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于 Windows 的任务管理器。</li>\n</ol>\n<p>如何杀死进程：</p>\n<p>(1) 图形化界面的方式</p>\n<p>(2) kill -9 pid (-9 表示强制关闭)</p>\n<p>(3) killall -9 程序的名字</p>\n<p>(4) pkill 程序的名字</p>\n<p>查看进程端口号：</p>\n<p>netstat -tunlp|grep 端口号</p>\n","feature":true,"text":"linux命令3 touch命令 $ touch testfile #修改文件时间属性为当前系统时间 $ ls -l testfile #查看文件的时间属性 使用指令 “touch” 时，如果指定的文件不存在，则将创建一个新的空白文件 echo “hello” &gt;c.txt...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"linux","slug":"linux","count":1,"path":"api/categories/linux.json"}],"tags":[{"name":"linux","slug":"linux","count":1,"path":"api/tags/linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A42\"><span class=\"toc-text\">linux常用命令2</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A41\"><span class=\"toc-text\">linux常用命令1</span></a></li></ol>","author":{"name":"icarus","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"码龄：1年","socials":{"github":"https://github.com/icarusice","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_43287808","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"集合","uid":"be4fadc0757b3a2eeaefd20302787665","slug":"引用 集合","date":"2022-01-18T14:32:21.000Z","updated":"2022-01-18T03:00:56.214Z","comments":true,"path":"api/articles/引用 集合.json","keywords":"Java","cover":null,"text":"强引用：创建一个对象并使用引用变量指向它，处于可达状态，不可能被垃圾回收机制回收 软引用:在内存空间足够时不会被回收，不足时有可能被回收 弱引用：垃圾回收机制运行时，不管内存是否足够，都会被回收 虚引用:类似于完全没有引用，也就是没有任何变量指向它。 Statement执行sql...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"面试","slug":"面试","count":2,"path":"api/categories/面试.json"}],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"}],"author":{"name":"icarus","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"码龄：1年","socials":{"github":"https://github.com/icarusice","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_43287808","juejin":"","customs":{}}},"feature":true}}